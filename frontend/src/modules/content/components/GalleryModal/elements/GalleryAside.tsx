import { FC, Fragment } from 'react';

import { Heading, Image, Status, Text } from '@/components/elements';
import { useTranslation } from '@/i18n';
import { createFullNameFromUser } from '@/modules/users';
import { cx } from '@/utils/classNames';
import { bytesToMb, getFileExtension } from '@/utils/file';

import { FALLBACK_IMAGE } from '../../../constants';
import { GalleryItem } from '../../../types';
import { getContentItemRef } from '../utils';

type Props = {
  contentItem: GalleryItem;
  isVideoContent: boolean;
};

export const GalleryAside: FC<Props> = ({ contentItem, isVideoContent }) => {
  const { t } = useTranslation();

  const {
    originalImage,
    isAutoGenerated,
    user: { firstname, lastname, email } = {},
  } = contentItem;

  const contentItemRef = getContentItemRef(contentItem, isVideoContent);

  const information = [
    {
      label: t('common.name'),
      value: createFullNameFromUser(firstname, lastname),
    },
    { label: t('common.email'), value: email },
    {
      label: t('common.fileFormat'),
      value: getFileExtension(contentItemRef?.content?.contentType || ''),
    },
    {
      label: t('common.fileSize'),
      value: bytesToMb(contentItemRef?.content?.sizeInBytes || 0).toUpperCase(),
    },
  ];

  return (
    <aside className="h-full w-1/4 px-8 pt-9">
      {!isVideoContent && (
        <>
          <Text className="mb-3" size="md" variant="bold">
            {`${t('content.original')}:`}
          </Text>

          <Image
            alt="original"
            className="rounded-md"
            fallbackPath={FALLBACK_IMAGE}
            src={originalImage?.thumbnailUri || FALLBACK_IMAGE}
          />
        </>
      )}
      <div className={cx('flex flex-col gap-2', !isVideoContent && 'pt-10')}>
        <Heading as="h3" className="pb-2" variant="h4">
          {`${t('common.information')}:`}
        </Heading>
        <div className="grid grid-cols-3 gap-2">
          {information.map(({ label, value }, index) => {
            return (
              <Fragment key={index}>
                <Text className="text-secondary-tint-40" size="sm">
                  {label}
                </Text>
                <Text
                  className="col-span-2 truncate text-secondary-tint-40"
                  size="md"
                >
                  {value}
                </Text>
              </Fragment>
            );
          })}
        </div>
        {isAutoGenerated && (
          <Status
            className="gap-2 bg-transparent p-0 pt-2 font-medium text-secondary-tint-40"
            iconsClassName="text-secondary"
            startIcon="info"
            status="default"
          >
            {t('content.autoGeneratedPhoto')}
          </Status>
        )}
      </div>
    </aside>
  );
};
